module CBC
  class Account # Счёт
    include Helpers::Attrs
    
    PROPERTIES = [
      :unit,        # единица счёта (баллы, валюта)
      :sum,         # сумма на счету
      :owner,       # держатель счёта
      :name,        # название
      :current_date # можно устанавливать дату только больше текущей (<Time>)
    ]
    attr_public_reader_protected_writer *PROPERTIES
    
    SPECIAL_PROPERTIES = [
      :operations, # операции по счёту
      :log         # как история: сумма на счету за каждый просмотренный день
    ]
    attr_public_reader_protected_writer *SPECIAL_PROPERTIES
    
    ONE_DAY = 1*24*60*60
    
    def initialize(options = {})
      set_options_and_assert(PROPERTIES, options)
      
      @log = {} # {date => sum, ...}
      @operations = [] # [<Operation>, ...]
    end
    
    def next_day!
      # выполнить расчёты на счету за текущий день
      
      day_operations = @operations.select { |op| op.date == @current_date }
      @sum = calc_sum(day_operations)
      @log[@current_date] = @sum
      
      @current_date += ONE_DAY
    end
    
    def add_operation(sum, mcc, comment = '')
      @operations << Operation.new(
        sum: sum,
        mcc: mcc,
        date: @current_date,
        comment: comment
      )
    end
    
    def calc_sum(day_operations)
      raise 'Not implemented'
    end
  end # class Account
  
  class CardAccount < Account # Карточный счёт
    # bonus_account есть только у некоторых тарифов карточных счетов, поэтому
    # нужно инициализировать бонусный счёт только у определённых карт.
    attr_public_reader_protected_writer :bonus_account
    
    # cash back бывает двух видов:
    #   1. в валюте счёта, обычно начисляется раз в месяц в определённый день.
    #   2. в виде баллов, тогда обычно есть два бонусных счёта:
    #      i) отложенные баллы (баллы начисляются сразу после подтверждения
    #         операции, становятся доступны спустя несколько дней)
    #     ii) доступные баллы (баллы, которые можно тратить; в некоторых тарифах
    #         баллы сгорают спустя несколько месяцев, если не были использованы)
    
    # нет необходимости знать, сколько реально баллов на бонусном счёте.
    # имеет значение сумма бонусов, выраженная в валюте карточного счёта.
    #
    # т.е. пользователь указывает сумму в валюте, которую хочет списать
    # с бонусного счёта, на бонусном счёте она переводится в бонусы. если бонусов
    # недостаточно для совершения операции, то остальная сумма списывается
    # с карточного счёта, связанного с этим бонусным счётом.
    #
    # значит, после расчёта операций по бонусному счёту необходимо пересчитать
    # операции по карточному счёту. чтобы не возникло коллизий, имеет смысл
    # всегда сначала считать операции с бонусами, затем по карточному счёту,
    # а все действия с бонусным счётом запускать только через карточный счёт.
    # например, Карта.bonus_account.add_operation(...)
    
    def calc_sum(day_operations)
      # возможные случаи изменения карточного счёта:
      #   - оплата картой -> уменьшение суммы на счету
      #   - снятие наличных -> уменьшение суммы на счету,
      #     может быть комиссия
      #   - перевод с карточного счёта физлицу -> уменьшение суммы на счету,
      #     может быть комиссия
      #   - перевод с карточного счёта юрлицу -> уменьшение суммы на счету,
      #     может быть комиссия
      #   - перевод на карточный счёт от физлица -> увеличение суммы на счету
      #   - перевод на карточный счёт от юрлица -> увеличение суммы на счету
      #
      # уменьшение суммы на счету: если средств недостаточно, то могут быть
      # два варианта поведения:
      #   1. заход в овердрафт
      #   2. отмена расходной операции (с состоянием ошибки)
      #
      # увеличение суммы на счету: некоторые тарифы карточных счетов ограничивают
      # максимальную сумму денег, которые можно на них хранить.
      # в этом случае должна быть отмена приходной операции (с состоянием ошибки).
    end
  end
end
